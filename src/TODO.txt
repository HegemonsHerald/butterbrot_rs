
=====================================
FIX ALL THE TODOS THAT ARE EVERYWHERE
=====================================

Adding the actual mathematics into the math module...
=====================================================

Args_Parser
===========

  - help text, that shows the flags, their args and the default values


Write_Back
==========

  - inside lib:: we'll have functions to do all of this...
  	- literally just lib::write_back(orbit:&Vec<u64>, supreme:&mut MutexLock)
        - Vec<u64>::with_capacity() and init counters to 0

  - vec[(imaginairy / step_size).floor() + (real / step_size).floor()] += 1


Termination Settings
====================

  - you specify the number of samples to compute

  - you optionally specify a timeout after which the program will definitely terminate, whether it's done or not

  - if you only specify a timeout, the args_parser sets the sample number to integer_max so that as many samples
    as possible will be computed

  - if you don't specify a timeout, the args_parser doesn't set the timeout flag, so the timeout will be ignored

    let (timeout, runtime, samples) = args_parser(args_v);

    where timeout = true if timeout setting was specified
	  runtime = the number of seconds (?) to terminate after, if timeout is true
	  samples = the number of samples to compute


Logging output
==============

  - after whole operation is done, before shutdown yield another log-message with the final data, and the filename,
    that was written and whatnot.
